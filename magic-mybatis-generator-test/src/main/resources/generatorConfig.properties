# 要添加到类路径的JAR / ZIP文件的完整路径名，或要添加到类路径的目录。
class_path_entry=E:\\Projects\\Files\\repository\\.m2\\mysql\\mysql-connector-java\\8.0.12\\mysql-connector-java-8.0.12.jar

# model 的生成方式
#   conditional：默认的值，与 hierarchical 相似，但如果单独的类只包含一个字段，则不会生成单独的类。因此，如果一个表只有一个主键字段，那么该字段将被合并到基记录类中。
#   flat：任何表生成一个类。该类将保存表中的所有字段。
#   hierarchical：如果该表具有主键，则该模型将生成主键类，另一个类保存该表中的任何BLOB列，另一个类保存其余字段。 类之间有一个适当的继承关系。
default_model_type=flat

# hibernate: 表中所有字段生成一个类，若存在联合主键则联合主键再生成一个PK类
# 会覆盖 default_model_type 和 table modelType
hibernate_model_type=true

# 指定生成代码的运行时目标
#   MyBatis3：默认的值，生成的对象中的“by example”方法支持几乎无限的动态where子句
#   MyBatis3Simple：使用此目标运行时生成的映射器是非常基本的CRUD操作，只有没有“by example”方法和非常少的动态SQL
#   org.mybatis.generator.codegen.mybatis3.IntrospectedTableMyBatis3Impl 扩展点
target_runtime=com.magic.generator.codegen.mybatis3.MagicIntrospectedTableMyBatis3Impl

# [NO]
# org.mybatis.generator.api.IntrospectedColumn 保存有关从数据库元数据返回的列的信息。
# 在一些罕见的情况下，可能需要重写此类来提供自己的实现 - 特别是如果您创建一组新的代码生成器。
introspected_column_impl=

# [NO]
# 默认值为false，如果为true，那么MBG将在表中用作列名称时分隔SQL关键字。
# MBG维护许多不同数据库的SQL关键字列表。 但是，该列表可能并不全面，
# 如果某个特定关键字不在MBG列表中，则可以强制使用<columnOverride>分隔列。
# org.mybatis.generator.internal.db.SqlReservedWords
auto_delimit_keywords=false

# [NO]
# 生成Java文件的编码方式
java_file_encoding=UTF-8

# [NO]
# java代码格式化
java_formatter=org.mybatis.generator.api.dom.DefaultJavaFormatter

# [NO]
# mapper.xml格式化
xml_formatter=org.mybatis.generator.api.dom.DefaultXmlFormatter

# [NO]
# 默认值为双引号（"），用作需要分隔符的SQL标识符的起始和终止标识符分隔符的值。
# 如果标识符包含空格，MBG将自动分隔SQL标识符。 如果在<table>或<columnOverride>配置中特别要求，MBG也会划分SQL标识符
beginning_delimiter=`
ending_delimiter=`

commentGeneratorType=com.magic.generator.plugins.comment.MagicCommentGenerator
# 默认值为false，是否禁止生成所有注释
suppress_all_comments=false
# 默认值为false，是否禁止显示注释时间
suppress_date=false
# 注释时间格式
dateFormat=yyyy-MM-dd hh:mm
# 是否添加表及字段说明注释
addRemarkComments=true
# 注释作者
author=lvcyong

# 数据库连接信息
driver_class=com.mysql.jdbc.Driver
connection_url=jdbc:mysql://localhost:3306/mysql?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&allowMultiQueries=true&failOverReadOnly=false
user_id=root
password=root

# 默认值为false，是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal
# 默认情况下的转换规则为：
#   如果精度>0或者长度>18，就会使用java.math.BigDecimal
#   如果精度=0并且10<=长度<=18，就会使用java.lang.Long
#   如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
#   如果精度=0并且长度<5，就会使用java.lang.Short
forceBigDecimals=false

############################################################################################

# 目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
model_target_project=src/main/java
# 生成实体类的包名
model_target_package=com.magic.mybatis.domain.entity
# 如果true就会使用构造方法入参，如果false就会使用setter方式。默认为false。
# ~~~这里如果用 true，不能使用指定查询列~~~，建议设为false
model_constructorBased=false
# 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
model_enableSubPackages=false
# 该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且不会生成setter方法。
# 如果为false，实体类属性就可以改变。默认为false。
model_immutable=false
# 设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性
model_rootClass=com.magic.base.entity.BaseEntity
# 是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样
# public void setUsername(String username) {
#    this.username = username == null ? null : username.trim();
# }
# 的setter方法。默认值为false
model_trimStrings=false

############################################################################################

# 目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
map_target_project=src/main/resources
# 生成实体类的包名
map_target_package=mappers
# 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
map_enableSubPackages=false

# 该属性用于选择一个预定义的客户端代码（可以理解为Mapper接口）生成器，用户可以自定义实现，
# 需要继承org.mybatis.generator.codegen.AbstractJavaClientGenerator类，必选有一个默认的构造方法。
#该属性提供了以下预定的代码生成器，首先根据<context>的targetRuntime分成三类：
#    MyBatis3:
#        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
#        MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
#        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
#    MyBatis3Simple:
#        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
#        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
client_type=ANNOTATEDMAPPER
# 目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
client_target_project=src/main/java
# 生成实体类的包名
client_target_package=com.magic.mybatis.domain.mapper
# 如果指定了该属性，实现类就会生成在这个包中。
client_implementationPackage=.impl
# 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
client_enableSubPackages=false
# 默认值 public， targetRuntime 是 MyBatis3 时无效
# ByExample 方法的可见级别
# public protected default private
client_exampleMethodVisibility=public
# dao 方法名规则 targetRuntime 是 MyBatis3 时无效
# default 默认值
# extended
# org.mybatis.generator.api.DAOMethodNameCalculator
client_methodNameCalculator=default
# 所有生成的接口都继承的父接口。 这个值可以通过<table>配置的rootInterface属性覆盖。
client_rootInterface=com.magic.base.mapper.BaseMapper
# ture 使用旧的构建器SqlBuilder， false使用新的构建器  来生成动态SQL
client_useLegacyBuilder=false
# 自定义的 example
client_exampleType=com.magic.base.criterion.Restrictions
# provider 类子包
client_providerSubPackage =provider

############################################################################################

# 数据库的schema,可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式
table_schema=mysql
# 数据库的catalog，如果设置了该值，生成SQL的表名会变成如catalog.tableName的形式
table_catalog=
# 如果指定，这个值会用在生成的select查询SQL的表的别名和列名上。 列名会被别名为 alias_actualColumnName(别名_实际列名) 这种模式
table_alias=
# 指定要生成的表名，可以使用SQL通配符匹配多个表
# 例如要生成全部的表，可以按如下配置
table_tableName=%
# 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema
table_ignoreQualifiersAtRuntime=true









